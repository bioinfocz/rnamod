#!/usr/bin/env python3

import os
import re
import sys
import argparse

bin_dir = os.path.join(os.path.dirname(__file__), '..')
sys.path.append(os.path.realpath(bin_dir))

import rnamod.mod as mod
import rnamod.config as config
import rnamod.utils as utils

try:
   from IPython import embed as repl
except NameError:
   pass

parser = argparse.ArgumentParser(description='Find RNA modifications')

parser.add_argument('--experiments', help='Experiment sam files',
                                     action='append',
                                     nargs='+',
                                     required=True)
parser.add_argument('--checks', help='Controll/check sam files',
                                action='append',
                                nargs='+',
                                required=True)
parser.add_argument('--fasta', help='Sequence files (only in fasta format)',
                               action='append',
                               nargs='+',
                               required=True)
parser.add_argument('--pattern', help='Find pattern in sequence (format: [atcgATCG.])',
                                 action='append',
                                 nargs='+',
                                 default=[])
parser.add_argument('--min-coverage', help='Min coverage for each positions (default: %(default)s)',
                                      default=config.min_coverage,
                                      type=int)
parser.add_argument('--max-pvalue', help='Max p-value for stops and errors (default: %(default)s)',
                                    default=config.max_pvalue,
                                    type=float)
parser.add_argument('--min-stops-relative', help='Min stops relative (default: %(default)s%%)',
                                            default=config.min_stops_relative,
                                            type=float)
parser.add_argument('--min-errors-relative', help='Minerrors relative (default: %(default)s%%)',
                                             default=config.min_errors_relative,
                                             type=float)
parser.add_argument('--boundary', help='Set boundaries for sequences (SEQUENCE FROM TO). Used for outputs not for calculations.',
                                  nargs=3,
                                  action='append')
parser.add_argument('--no-graphic', action='store_true')
parser.add_argument('--no-tsv', action='store_true')
parser.add_argument('--outputs')

args = parser.parse_args()

if not args.no_graphic:
   version = os.popen('node --version').read()
   version_match = re.match(r'v(\d+)\.\d+', version)
   if not version_match or int(version_match.group(1)) < 8:
      print('Node is not installed or version is lesser than 8')
      print('Use --no-graphic option or install latest version of node')
      exit(1)

config.min_coverage = args.min_coverage
config.max_pvalue = args.max_pvalue
config.min_stops_relative = args.min_stops_relative
config.min_errors_relative = args.min_errors_relative

if args.boundary:
   for (seq, sfrom, sto) in args.boundary:
      config.boundaries.append((seq, int(sfrom), int(sto)))

print('Experiments:')
for file in utils.flatten(args.experiments):
   print('  - {}'.format(file))

print('Checks:')
for file in utils.flatten(args.checks):
   print('  - {}'.format(file))

print('Fasta:')
for file in utils.flatten(args.fasta):
   print('  - {}'.format(file))

print('Pattern:')
for pattern in utils.flatten(args.pattern):
   print('  - {}'.format(pattern))

print('Min coverage: {}'.format(config.min_coverage))
print('Max p-value: {}'.format(config.max_pvalue))
print('Min relative stops: {}'.format(config.min_stops_relative))
print('Min relative errors: {}'.format(config.min_errors_relative))
print('')

rmod = mod.Mod(args.fasta, args.pattern)
rmod.run(args.experiments, args.checks)

outputs = args.outputs
if outputs:
   if not os.path.isdir(outputs):
      print('Path {} is not a directory'.format(outputs))
      exit(1)
else:
   outputs = utils.ensure_directory('outputs')

if not args.no_graphic:
   rmod.to_graphic(outputs)

if not args.no_tsv:
   rmod.to_tsv(outputs)

print('')
print('Outputs are stored in "{}"'.format(outputs))
